 From TI patent, the ORDER of the segment activation
 7,6,5,2,4,0,1,3
 (don't really care about this so much I don't think)
 
Segment numbering:
E, F, B, G, C, A, D, P
0  1  2  3  4  5  6  7  (WVU)

This makes the keyboard mapping sane, also, as the segment # is then the row #





   1  1  1        
   2  1  0  9  8  7  6  5  4  3  2  1
   
      L. #  #     C  C  C  C         	These are the "library" flash programs   21-99
   
      U. #  #     C  C  C  C				These are the "user" EEPROM programs   01-20
		 
		 
		 ## is program number
		 CCCC is CRC-16 of program (or "- - - -" if blank)
		 
	  
+ increase #
- decrease #	  
STO store program in slot # if it's a USER slot (1-20)
RCL recall program from slot #
GTO goto L.21
RST goto U.01
CE clear program in slot # if it's a USER slot (1-20)
R/S exit program manager
	  
	  
Keep the same 50us tick:

Enter with slot = 01


generate_display_data

display_cycle

check_keyboard_input




10-100KHz
100us to 10us
DATA 0 ---> MARK/SPACE
DATA 1 ---> SPACE/MARK
MAK == DATA 1
NoMAK == DATA 0
SAK == DATA 1
NoSAK = CV (MARK-MARK)

STANDBY PULSE (TSTBY #9) = HIGH for 600us minimum (!!!)
START HEADER SETUP TIME (TSS #10) = 10us minimum (can do this instead of STANDBY pulse)
START HEADER LOW PULSE TIME (THDR #11) = 5us minimum (follows standby/header pulse)

START HEADER = 0x55 + MAK 


MEMIO high for TSS, then MEMIO low for THDR, then 0x55, then MAK, then NoSAK (don't check SAK)



24MHz clock to APB1
TIM3 :

RCC->APB1ENR |= RCC_APB1ENR_TIM3EN

TIM3->PSC = 24-1; // 24MHz APB1 divide-by-24 = 1MHz = 1us per tick
TIM3->ARR = ticks-1;  // number of ticks to count up
TIM3->EGR = 0x0001;   // update event
TIM3->CR1 = 0x0009;	 // enable counting     but also set: OPM (b3 = 1 to count only once), 

NVIC->ISER[TIM3_IRQn >> 0x05] = (uint32_t)0x01 << (TIM3_IRQn & (uint8_t)0x1f); enable interrupts
TIM3->DIER = 0x0001; enable interrupts

